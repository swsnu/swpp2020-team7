{"version":3,"sources":["components/Navigation/Navigation.tsx","components/Header/Header.tsx","containers/Auth/Logout/Logout.tsx","containers/Refrigerator/Refrigerator.tsx","containers/UserNotice/UserNotice.tsx","containers/Mypage/Mypage.tsx","containers/RecipeList/RecipeList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","id","onClick","props","history","push","React","Component","Header","Logout","Refrigerator","UserNotice","Mypage","RecipeList","e","preventDefault","App","path","exact","component","Boolean","window","location","hostname","match","createBrowserHistory","rootReducer","combineReducers","router","connectRouter","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","routerMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAmCeA,E,uKAxBH,IAAD,OACP,OACE,yBAAKC,GAAG,cACJ,4BAAQA,GAAG,sBACHC,QAAS,kBAAM,EAAKC,MAAMC,QAAQC,KAAK,eAD/C,gBAIA,4BAAQJ,GAAG,qBACHC,QAAS,kBAAM,EAAKC,MAAMC,QAAQC,KAAK,iBAD/C,gBAIA,4BAAQJ,GAAG,gBACHC,QAAS,kBAAM,EAAKC,MAAMC,QAAQC,KAAK,aAD/C,WAIA,4BAAQJ,GAAG,gBACHC,QAAS,kBAAK,EAAKC,MAAMC,QAAQC,KAAK,aAD9C,e,GAhBeC,IAAMC,WCkBhBC,E,uKAnBH,IAAD,OACP,OACE,yBAAKP,GAAG,UACJ,4BAAQA,GAAG,oBACHC,QAAS,kBAAK,EAAKC,MAAMC,QAAQC,KAAK,eAD9C,mCAIA,4BAAQJ,GAAG,mBACHC,QAAS,kBAAK,EAAKC,MAAMC,QAAQC,KAAK,cAD9C,mCAGA,4BAAQJ,GAAG,oBACHC,QAAS,kBAAK,EAAKC,MAAMC,QAAQC,KAAK,eAD9C,2B,GAXWC,IAAMC,WCEZE,E,uKANX,OACE,2C,GAHeH,IAAMC,WCaZG,E,oNANX,OACE,oE,GAPqBJ,IAAMC,WCOlBI,E,uKANX,OACE,+C,GAHmBL,IAAMC,WCQhBK,E,uKANX,OACE,4C,GAHeN,IAAMC,WC4CZM,EAzB+B,SAACV,GAc7C,OACI,yBAAKF,GAAG,eAAR,aAEE,4BAAQA,GAAG,yBACHC,QATgB,SAACY,GAC7BA,EAAEC,iBACFZ,EAAMC,QAAQC,KAAK,oBAMf,iDCEOW,EApBiB,SAAC,GAAe,IAAdZ,EAAa,EAAbA,QAChC,OACE,yBAAKH,GAAG,OACN,kBAAC,IAAD,CAAiBG,QAASA,GACtB,yBAAKH,GAAG,kBACN,kBAAC,EAAD,CAAQG,QAASA,IACjB,kBAAC,EAAD,CAAYA,QAASA,KAEvB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOa,KAAK,YAAYC,OAAK,EAACC,UAAWT,IACzC,kBAAC,IAAD,CAAOO,KAAK,cAAcC,OAAK,EAACC,UAAWR,IAC3C,kBAAC,IAAD,CAAOM,KAAK,UAAUC,OAAK,EAACC,UAAWP,IACvC,kBAAC,IAAD,CAAOK,KAAK,UAAUC,OAAK,EAACC,UAAWV,IACvC,kBAAC,IAAD,CAAOQ,KAAK,WAAWC,OAAK,EAACC,UAAWN,QCrBhCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCLApB,EAAUqB,cACVC,EAAcC,YAAgB,CAElCC,OAAQC,YAAczB,KASlB0B,EAAoBT,OAAeU,sCAAwCC,IAa3EC,EAAQC,YAAYR,EACxBI,EAAiBK,YAAgBC,IAAOC,YAAiBjC,MAG3DkC,IAASC,OACL,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,CAAK7B,QAASA,KAElBoC,SAASC,eAAe,SD6FtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e723d1c.chunk.js","sourcesContent":["import React from 'react';\nimport { History } from 'history';\nimport Logout from '../../containers/Auth/Logout/Logout';\nimport Refrigerator from '../../containers/Refrigerator/Refrigerator';\nimport Mypage from '../../containers/Mypage/Mypage';\n\ninterface HeaderProps {\n  history: History;\n}\n\nclass Navigation extends React.Component<HeaderProps> {\n  render() {\n    return (\n      <div id=\"navigation\">\n          <button id=\"naengpa-logo-button\"\n                  onClick={() => this.props.history.push('/freezers')}>\n              냉파\n          </button>\n          <button id=\"user-notice-button\"\n                  onClick={() => this.props.history.push('/userNotice')}>\n              알림\n          </button>\n          <button id=\"mypage-button\" \n                  onClick={() => this.props.history.push('/logout')}>\n              MY PAGE\n          </button>\n          <button id=\"logout-button\"\n                  onClick={()=> this.props.history.push('/mypage')}>\n              logout\n          </button>\n      </div>\n    );\n  }\n};\n\nexport default Navigation; ","import React from 'react';\nimport { History } from 'history';\n\n\ninterface NavigationProps {\n  history: History;\n}\n\nclass Header extends React.Component<NavigationProps> {\n  render() {\n    return (\n      <div id=\"header\">\n          <button id=\"my-freeger-button\"\n                  onClick={()=> this.props.history.push('/freezers')}>\n              나의 냉장고\n          </button>\n          <button id=\"my-recipe-button\" \n                  onClick={()=> this.props.history.push('/recipes')}>\n              레시피 찾기</button>\n          <button id=\"my-article-button\" \n                  onClick={()=> this.props.history.push('/articles')}>\n              게시판\n          </button>\n      </div>\n    );\n  }\n};\n\nexport default Header; ","import React from 'react';\n\nclass Logout extends React.Component {\n  render() {\n    return (\n      <div>logout</div>\n    ); \n  };\n};\n\nexport default Logout;","import React from 'react';\n\n\nclass Refrigerator extends React.Component {\n  componentDidMount() {\n\n  };\n\n  render() {\n    return (\n      <div>나의 냉장고</div>\n    ) \n  }\n}\n\nexport default Refrigerator;","import React from 'react';\n\nclass UserNotice extends React.Component {\n  render() {\n    return (\n      <div>UserNotice</div>\n    ); \n  };\n};\n\nexport default UserNotice;","import React from 'react';\n\nclass Mypage extends React.Component {\n  render() {\n    return (\n      <div>My page</div>\n    ); \n  };\n};\n\nexport default Mypage;","import React, {useEffect, ChangeEvent, Component, MouseEvent, FormEvent, useState} from 'react';\nimport {Form, Input, Button} from 'antd';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {History} from 'history';\n\ninterface RecipeListProps {\n  history: History;\n}\ninterface StateProps {\n  userName: string;\n  userImage: HTMLImageElement; // or File(as input element) or String(url to image)\n  foodName: string;\n  foodCategory: string; \n  cookTime: number;\n  foodLike: number; \n}\n\ntype RecipeProps = {\n\n}\n\nconst RecipeList: React.FC<RecipeListProps> = (props) => {\n\n\n  // userEffect(() => {\n  //   if(recipes){\n  //     setRecipes(data);\n  //   }\n  // }, [recipes])\n\n  const onClickRecipeRegister = (e: MouseEvent<HTMLButtonElement>):void => {\n    e.preventDefault();\n    props.history.push('/recipe/create');\n  }\n  \n  return (\n      <div id=\"recipe-list\">\n        RecipeList\n        <button id=\"recipe-register-button\" \n                onClick={onClickRecipeRegister}>\n          레시피 등록하기\n        </button>\n      </div>\n  );\n};\n\nexport default RecipeList;","import React from 'react';\nimport './App.css';\nimport { Route, Redirect, Switch} from 'react-router-dom';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { connect } from 'react-redux'; \nimport { History } from 'history';\nimport Header from './components/Navigation/Navigation';\nimport Navigation from './components/Header/Header';\n// import Login from './containers/Auth/Login/Login';\nimport Logout from './containers/Auth/Logout/Logout';\n// import Signup from './containers/Auth/Signup/Signup';\nimport Refrigerator from './containers/Refrigerator/Refrigerator';\nimport UserNotice from './containers/UserNotice/UserNotice';\nimport Mypage from './containers/Mypage/Mypage';\nimport RecipeList from './containers/RecipeList/RecipeList';\n\ninterface AppProps {\n  history: History;\n}\n\nconst App: React.FC<AppProps> = ({history}) => {\n  return (\n    <div id=\"App\">\n      <ConnectedRouter history={history}>\n          <div id=\"naengpa-header\">\n            <Header history={history}/>\n            <Navigation history={history}/>\n          </div>\n          <Switch>\n            <Route path=\"/freezers\" exact component={Refrigerator}/> \n            <Route path=\"/userNotice\" exact component={UserNotice}/> \n            <Route path=\"/mypage\" exact component={Mypage}/>\n            <Route path=\"/logout\" exact component={Logout}/>\n            <Route path=\"/recipes\" exact component={RecipeList}/>\n          </Switch>\n      </ConnectedRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history'\nimport thunk from 'redux-thunk';\n\nconst history = createBrowserHistory();\nconst rootReducer = combineReducers({\n  \n  router: connectRouter(history)\n})\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n// const logger = (typeof store): store => {\n//   return next => {\n//     return action => {\n//       console.log('[Middleware] Dispatching', action);\n//       const reusult = next(action);\n//       console.log('[Middleware] Next State', store.getState());\n//       return reusult;\n//     }\n//   }\n// }\n\nconst store = createStore(rootReducer, \n  composeEnhancers(applyMiddleware(thunk, routerMiddleware(history)))\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App history={history}/>\n    </Provider>, \n    document.getElementById('root') as HTMLElement \n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}